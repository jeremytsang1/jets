#+hugo_base_dir: ../
#+STARTUP: logdone
* Posts
** DONE OSU CS 467: Blog Post #1
CLOSED: [2024-01-11 Thu 17:54]
:PROPERTIES:
:EXPORT_FILE_NAME: cs-467-post-week-1
:END:
Hi, my name is Jeremy Tsang and I am excited to be graduating this quarter!
This course, CS 467, will be my final class and I hope I will be able to make
something interesting. My background before OSU was in chemistry. In my first
undergrad career I was mostly focused on computational/theoretical chemistry
and afterwards attempted to pursue a graduate degree in it. To this day I think
it is the subject I had the most fun studying, but unfortunately jobs in the
field are far and few between. As a result I had to shift industries to
something more practical and worked as a teacher and tutor for a little bit and
then did some work in an agricultural chemistry lab. However, my time studying
studying computational chemistry exposed me to programming. While working I
always wondered if I would have more fun coding than doing routine lab work.

My suspicisions were confirmed when I began my coursework at OSU. I did enjoy
most of the courses I have taken, especially the upper division ones like OS,
parallel programming, and mobile development. In addition to the material being
interesting, the instructors for those courses were great which added quite a
bit to the learning experience. They were time consuming though and I did have
to switch jobs once again as I found myself wasting a lot of time commuting at
my previous job. However, some things in life happened and I had to take a
break from school back in late 2022 while having to settle for work in retail
temporarily. It is good to be back though!

With regards to favorite technologies, I would have to say the one I spend most
of my free time on is GNU Emacs. I was introduced to it during my chemistry
days and there is just something addicting about being able to configure it
exactly to my liking as well as doing everything from a single
program/context. Although my first experience with it was of course just a text
editor, over the years configuring it has become more like a hobby. In addition
to development I also use it for browsing the internet, reading PDFs, taking
notes, scheduling tasks in my life with its agenda, and more. Due to its nature
as a Lisp interpreter it ascends from being an editor to being platform for
building text based apps. I am not the best when it comes to Emacs Lisp but I
have gotten to the point where I can comfortably tinker with most things after
reading the docs. Since nearly everything can be customized one way or another
via Emacs Lisp this gives a large amount of control over packages (similar to
VS Code extensions) that one uses. Any text related experience can be made to
fit like a glove should I choose to invest the time to research it. Sometimes
this can manifest as simple as rebinding a keyboard shortcut. Other times it
can be more complex like writing a helper function to generate a LaTeX snippet
for a polynomial of arbitrary degree. It does come at a cost however as it is
easy to get carried away [[https://en.wiktionary.org/wiki/yak_shaving][yak shaving]].

Other than tinkering with Emacs, I like to spend time my free time
weightlifting. I previously competed powerlifting but started [[https://en.wikipedia.org/wiki/Olympic_weightlifting][weightlifting]]
because I always thought snatching and clean and jerking looked
challenging. Other hobbies I used to indulge in more frequently include
playing/engraving piano music, playing old PC games (Dark Souls 2 and Heroes of
Might and Magic 3 are two favorites), and reading (mostly fantasy but sometimes
non-fiction). Time always seems too short these days to get to everything
though!

** DONE OSU CS 467: Blog Post #2               :Flutter:@Mobile__Development:

**
CLOSED: [2024-02-07 Wed 21:29]
:PROPERTIES:
:EXPORT_FILE_NAME: cs-467-post-week-2
:END:
*** Overview
The project I am working on is the [[https://eecs.engineering.oregonstate.edu/capstone/submission/pages/viewSingleProject.php?id=g8UDl6xlaVI8s16E][Forest Wellness Checkup App]], which is a
cross platform mobile app designed to aid forestry professionals in the
field. At the time of this writing we are about half way into the capstone
course however we are only just finished in the second week of development. As
such, our team has not yet gotten into the nitty gritty of all the other
technologies we will use for our project including libraries for PDF
manipulation, DOCX manipulation, stylus control, and digital ink
recognition. In contrast, we have been very involved in the initial layout of
the mobile and getting more and more familiar with the Flutter and Dart
SDKs. There have been some pain points (mainly learning curve) but so far the
Flutter/Dart SDKs have been my favorite technology mainly due to three things:
Flutter's built-in widgets, cross platform development, and developer
experience. Personally I believe the pros outweigh the cons for this project.
*** Learning Curve
First, lets start with the bad: outside of Flutter, Dart is rarely seen in the
wild. For this reason there is a high chance that if a developer has not worked
on a Flutter app, said developer probably is not familiar with Dart. This leads
to the inevitable challenge that is simultaneously learning a new language and
as well as a framework which can be a tall order. Our team,of course, had to
take some time to work through this during our first week of
development. Despite both my team members having no prior experience with Dart,
they were both able to get up to speed due to its similarities with other
languages. Flutter, on the other hand has been, a bit more challenging in that
layouts are a bit different than what one is used to when developing for web.
*** Built-in Widgets
However, this is where the benefits start coming in handy namely the
declarative widget system that Flutter employs. There are a myriad of widgets
to do nearly any layout task we can imagine. Further if there are layouts that
they do no exactly cover we can create our own through composition. This has
been great to avoid re-inventing the wheel for many common layouts we needed
for our app. Moreover the built-in widgets are documented in great detail at
[[https://docs.flutter.dev/][flutter.dev]] in addition to videos on many common widgets as well as cookbooks
for frequently used tasks. In regards to styling, these widgets do not need a
separate language (like CSS for React) which allows a single language for
layout, styling, and logic.
*** Cross Platform
Another benefit that helps mitigate the time sink into the learning curve is
the fact that Flutter is inherently cross platform. As Flutter can build apps
for Android, iOS, web, Desktop we can just keep a single codebase for the
entire project. Comparing this to Native apps where we would need both Kotlin
and Swift this reduces the amount of work we have to do as a mere three person
team. Unfortunately one limitation here is that to build/test iOS apps one must
still use Xcode and hence have access to a macOS device or appropriate
virtualization tools.
*** Developer Experience
Finally, Flutter toolchain makes the developer experience very pleasant. Since
the Dart SDK comes bundled with linter ([[https://dart.dev/tools/dart-analyze][dart analyze]]), formatter ([[https://dart.dev/tools/dart-format][dart format]]),
and even [[https://github.com/dart-lang/sdk/tree/main/pkg/analysis_server][language server]] (one less thing to install for Emacs and Vim users)
just having the Dart SDK provides quite a few development tools out of the
box. This saves developers new to the framework from having to hunt down and
install these tools. Further, the language server provides access to another
useful development tool [[https://dart.dev/tools/dart-fix][dart fix]] so when developing, ones editor/IDE can make
suggestions and even perform refactoring based off the results of the
linter. For example if one wanted to change a widget from [[https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html][stateless]] to
[[https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html][stateful]], one need only consult their editor/IDE and choose the appropriate
"code action" instead of rewriting the entire class by hand (which would be
more error prone). Other code actions work directly on the widget tree by
wrapping widgets, removing them, or even extracting them to separate
variables/methods/classes. In addition to the aforementioned tools there are
also Flutter specific tools like hot reload/start (saves a huge amount of time
instead of recompiling each time) and the Flutter dev tools (widget inspector,
profiler, and friends) that provide even more help out of the box.
*** Closing Remarks
Despite the initial learning curve I believe that the Flutter/Dart SDK is the
right choice for this project. It saves a huge amount of time being cross
platform but also makes the process of actually writing the app pleasant and
quick as well. This app does not need a large number of esoteric features so I
think the more mature ecosystem of a framework like React Native is
unwarranted. I'm happy with Flutter and Dart so far.
* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: projects
:END:
** DONE Minesweeper                                                   :Game:
CLOSED: [2024-03-22 Fri 17:51]
:PROPERTIES:
:EXPORT_FILE_NAME: minesweeper
:END:
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.
** DONE Forest Wellness Checkup App           :Flutter:@Mobile__Development:
CLOSED: [2024-03-22 Fri 17:56]
:PROPERTIES:
:EXPORT_FILE_NAME: forest-wellness-checkup-app
:END:
Aliquam erat volutpat.  Nunc eleifend leo vitae magna.  In id erat non orci commodo lobortis.  Proin neque massa, cursus ut, gravida ut, lobortis eget, lacus.  Sed diam.  Praesent fermentum tempor tellus.  Nullam tempus.  Mauris ac felis vel velit tristique imperdiet.  Donec at pede.  Etiam vel neque nec dui dignissim bibendum.  Vivamus id enim.  Phasellus neque orci, porta a, aliquet quis, semper a, massa.  Phasellus purus.  Pellentesque tristique imperdiet tortor.  Nam euismod tellus id erat.
** DONE Time Tools               :@Mobile__Development:Android:Google__Play:
CLOSED: [2024-03-22 Fri 17:56]
:PROPERTIES:
:EXPORT_FILE_NAME: time-tools
:END:
Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.
* DONE About
CLOSED: [2024-03-22 Fri 18:25]
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_SECTION: /
:END:
Hello, my name is Jeremy Tsang.
# ** Interests
# - Computer Science
# - Math
# - GNU Emacs (Since 2012)
# - Weightlifting (Since 2023)
# - Powerlifting (Since 2012)
# - Piano (Since 1996)
** Educational Background
- B.S. in Computer Science (WIP)
- B.A. in Pure Mathematics (2011)
- B.S. in Chemistry (2011)
* Spelling
LocalWords: LocalWords  WIP
